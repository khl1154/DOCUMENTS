객체 지향 프로그래밍 이란?
프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을
통해 로직을 구성하는 프로그래밍 방법


장점
-코드 재사용이 용이
남이 만든 클래스를 가져와서 이용할수있고 상속을 통해 확장해서 사용가능
-유지보수가 쉬움
절차 지향 프로그래밍에서는 코드를 수정해야할때 일일이 찾아 수정해야 하는 반면 객체 지향
프로그래밍에서는 수정해야할 부분이 클래스 내부에 멤버 변수혹은 메서드로 있기 때문에 해당부분만 수정하면 됨

-대형 프로젝트에 적합
클래스단위로 모듈화시켜서 개발할수있으므로 대형프로젝트처럼 여러명, 여러회사에서 개발이 필요할시 업무 분담하기
쉽다

-단점
처리속도 상대적으로 느림
객체가 많으면 용량이 커질수있음
설계시 많은 시간과 노력이 필요

객체 지향 프로그래밍 키워드  5
클래스+ 인스턴스
추상화
캡슐화
상속
다형성

-객체지향 프로그래밍에서 추상화
불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 공통의 속성이나 기능을 묶어 이름을 붙이는것

-다형성
오버라이딩, 오버로딩



-getter, setter 사용하는 이유
멤버변수에 직접 접근 하지 못하게 private 으로 접근지정자를 설정하고 public으로 getter, setter메서드를 만드는것을
많이 해왔다 그러면서 이럴꺼면 어차피 아무나 접근가능한데 왜 private을 할까?
getter, setter를 사용하면 메서드를 통해서 접근하기 때문에 메서드안에서 매개변수같이 어떤 올바르지 않은 입력에 
대해 사전에 처리할수 있게 제한하거나 조절가능



-스프링 mvc 패턴의 처리과정 설명하기
1.dispatcherservlet 클래스(일종의 프론트 컨트롤러)가 요청을 가로챈다
2.dispatcherservlet은 handlermapping(url분석등) 에게 어떤 컨트롤러에게 요청을 위임하면 좋을지 물어본다
(servlet-context.xml에서 컨트롤러로 등록한것들을 스캔해서 찾아줌)
3. 요청에 매핑된 컨트롤러가 있다면 RequestMapping을 통하여 요청을 처리할 메서드에 도달
4.컨트롤러에서는 해당 요청을 처리할 service를 주입받아 비즈니스로직을 service에 위임
5. service에서는 요청에 필요한 작업 대부분을 담당, db에 접근이 필요하면 dao를 주입받아 db처리는 dao에 위임
6. dao는 mybatis설정(hibernate등) 설정을 이용해서 sql쿼리를 날려 db정보를 받아 서비스에게 다시 돌려줌
(이때 보통 vo(dto) 를 컨트롤러에서 부터 내려받아 쿼리의 결과를 vo에 담는다)
7.모든 로직을 끝낸 서비스가 결과를 컨트롤러에게 넘긴다.
8.결과를 받은 컨트롤러는 model객체에 view파일을 보여줄것인지등의 정보를 담아 dispatcherservlet에게 보낸다
9. dispatcherservlet은 viewresolver에게 받은 뷰에 대한 정보를 넘긴다
10. viewresolver는 해당 jsp를 찾아서 dispatcherservlet에게 알려준다
(servlet-context.xml에서 suffix,prefix를 통해 만들어주는것도 viewresolver)
11.dispatcherservlet은 응답할 view에게 render를 지시하고 view는 응답로직을 처리한다
12. 결과적으로 dispatcherservlet이 클라이언트에게 렌더링된 view를 응답한다.